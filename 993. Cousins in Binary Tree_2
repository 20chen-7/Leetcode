# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        x_parent, x_depth, x_found = None, None, False
        y_parent, y_depth, y_found = None, None, False
        def update(node, depth, parent):
            if node.val == x:
                nonlocal x_parent, x_depth, x_found
                x_parent, x_depth, x_found = parent, depth, True
            elif node.val == y:
                nonlocal y_parent, y_depth, y_found
                y_parent, y_depth, y_found = parent, depth, True
        q = collections.deque([(root, 0)])
        update(root, 0, None)
        while q:
            node, depth = q.popleft()
            if node.left:
                q.append((node.left, depth+1))
                update(node.left, depth+1, node)
            if node.right:
                q.append((node.right, depth+1))
                update(node.right, depth+1, node)
            if x_found and y_found:
                break
        return x_depth == y_depth and x_parent != y_parent
            
            
        
        
