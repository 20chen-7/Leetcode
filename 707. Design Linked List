class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None
class MyLinkedList:
    def __init__(self):
        self.head = ListNode(0)
        self.size = 0

    def get(self, index: int) -> int:
        if index < 0 or index >= self.size:
            return -1
        cur = self.head
        for _ in range(index +1):
            cur = cur.next
        return cur.val
    
    def addAtHead(self, val: int) -> None:
        self.addAtIndex(0, val)

    def addAtTail(self, val: int) -> None:
        self.addAtIndex(self.size, val)

    def addAtIndex(self, index: int, val: int) -> None:
        if index < 0 or index > self.size:
            return 
        pred = self.head
        self.size += 1
        for _ in range(index):
            pred = pred.next
        add_node = ListNode(val)
        add_node.next = pred.next
        pred.next = add_node
  
    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return 
        pred = self.head
        self.size -= 1
        for _ in range(index):
            pred = pred.next
        pred.next = pred.next.next
            
            
        
